{"version":3,"sources":["Filters/index.js","ListView/index.js","MapView/index.js","App/index.js","serviceWorker.js","index.js"],"names":["props","Container","style","paddingTop","Navbar","bg","Dropdown","Toggle","Menu","Item","onClick","filterCategory","ListView","state","sources","getSources","prevProps","offset","this","limit","isEqual","filters","setState","filter","source","category","Service","slice","ListGroup","map","key","name","href","Website","Name","Notes","Component","defaultProps","positions","lat","lng","MapContainer","geocoder","google","maps","Geocoder","position","zip","zoom","initialCenter","height","Object","keys","numSources","length","radius","center","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","GoogleApiWrapper","apiKey","App","className","Filters","Row","Col","MapView","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.de58aae9.chunk.js","sourcesContent":["import React from 'react';\nimport { Container, Navbar, Dropdown } from 'react-bootstrap';\n\nexport default function (props) {\n  return (\n    <Container style={{ paddingTop: 20 }}>\n        <Navbar bg=\"light\">\n        <Dropdown>\n          <Dropdown.Toggle>Category Filter</Dropdown.Toggle>\n          <Dropdown.Menu>\n            <Dropdown.Item onClick={() => props.filterCategory('Grocery Stores')}>Grocery Stores</Dropdown.Item>\n            <Dropdown.Item onClick={() => props.filterCategory('Prepared Meals')}>Prepared Meals</Dropdown.Item>\n            <Dropdown.Item onClick={() => props.filterCategory('Pharmacy')}>Pharmacy</Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n        </Navbar>\n    </Container>\n  );\n}\n","import React, { Component } from 'react';\nimport { isEqual } from 'lodash';\nimport { Container, ListGroup } from 'react-bootstrap';\nimport sources from '../data.json';\n\nexport default class ListView extends Component {\n  static defaultProps = {\n    offset: 0,\n    limit: 50\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { sources: this.getSources(props) }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.offset !== this.props.offset ||\n      prevProps.limit !== this.props.limit ||\n        !isEqual(prevProps.filters, this.props.filters)) {\n      this.setState({ sources: this.getSources() });\n    }\n  }\n\n  getSources(props = this.props) {\n    return sources\n      .filter(source => !!props.filters.category ? source.Service === props.filters.category : true)\n      .slice(props.offset, props.offset + props.limit)\n  }\n\n  render() {\n    return (\n      <Container style={{ paddingTop: 20 }}>\n        <ListGroup bg=\"light\">\n          {this.state.sources.map(source => (\n            <ListGroup.Item key={source.name}>\n              <div><a href={source.Website}>{source.Name}</a></div>\n              <div>{source.Service}</div>\n              <div>{source['Phone Number']}</div>\n              <div>{source.Notes}</div>\n            </ListGroup.Item>\n          ))}\n        </ListGroup>\n      </Container>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { Map, Circle, GoogleApiWrapper } from 'google-maps-react';\nimport sources from '../data.json';\n\nconst positions = {\n    '11377': { lat: 40.743, lng: -73.904 },\n    '11209': { lat: 40.623, lng: -74.030 },\n    '10016': { lat: 40.746, lng: -73.978 }\n}\n \nexport class MapContainer extends Component {\n    static defaultProps = {\n        offset: 0,\n        limit: 50\n    };\n\n    constructor(props) {\n        super(props);\n        this.geocoder = new props.google.maps.Geocoder();\n        this.state = { sources: this.getSources(props) }\n    }\n\n    componentDidUpdate(props) {\n        if (props.offset !== this.props.offset ||\n            props.limit !== this.props.limit ||\n            props.filters !== this.props.filters) {\n            this.setState({ sources: this.getSources(props) });\n        }\n    }\n\n    getSources(props = this.props) {\n        return sources\n            .filter(source => !!props.filters.category ? source.Service === props.filters.category : true)\n            .slice(props.offset, props.offset + props.limit)\n            .map(source => ({ ...source, position: positions[source['Zip Code']] }));\n    }\n\n    filterSourcesByZip(zip) {\n        this.setState({\n            sources: this.getSources().filter(source => source['Zip Code'] === zip)\n        })\n    }\n\n    render() {\n        return (\n            <Map\n                google={this.props.google}\n                zoom={12}\n                initialCenter={{ lat: 40.7128, lng: -74.0060 }}\n                style={{ height: 1000 }}\n            >\n                {Object.keys(positions).map(zip => {\n                    const numSources = this.state.sources.filter(source => source['Zip Code'] === zip).length\n                    return (\n                        <Circle\n                            key={zip}\n                            radius={(numSources / this.state.sources.length) * 2000}\n                            center={positions[zip]}\n                            // onMouseover={() => console.log('mouseover')}\n                            // onClick={() => this.filterSourcesByZip(zip)}\n                            // onMouseout={() => console.log('mouseout')}\n                            strokeColor='transparent'\n                            strokeOpacity={0}\n                            strokeWeight={5}\n                            fillColor='#FF0000'\n                            fillOpacity={0.4}\n                        />\n                    );\n                })}\n                {/* {this.state.sources.map(source => (\n                    <Marker key={source.Name} name={source.Name} position={source.position} /> \n                ))} */}\n                {/* <InfoWindow onClose={this.onInfoWindowClose}>\n                    <h1>{this.state.selectedPlace.name}</h1>\n                </InfoWindow> */}\n            </Map>\n        );\n    }\n}\n \nexport default GoogleApiWrapper({ apiKey: 'AIzaSyCsfUxfZToHaKYiLO3iWn5NZWLkwiOkhbM' })(MapContainer)","import React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport Filters from '../Filters';\nimport ListView from '../ListView';\nimport MapView from '../MapView';\nimport './index.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { filters: {} }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Filters filterCategory={(category) => this.setState({ filters: { ...this.state.filters, category } })} />\n        <Row>\n          <Col><MapView filters={this.state.filters} /></Col>\n          <Col><ListView filters={this.state.filters} /></Col>\n        </Row>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}