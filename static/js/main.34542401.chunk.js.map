{"version":3,"sources":["Filters/index.js","ListView/index.js","MapView/index.js","App/index.js","serviceWorker.js","index.js"],"names":["services","Set","sources","forEach","source","Service","split","service","add","props","Container","style","paddingTop","Navbar","bg","Dropdown","Toggle","Menu","Array","from","sort","map","Item","key","onClick","filterCategory","ListView","state","getSources","prevProps","offset","this","limit","isEqual","filters","setState","filter","category","slice","ListGroup","Name","href","Website","Notes","Component","defaultProps","positions","lat","lng","MapContainer","geocoder","google","maps","Geocoder","position","zip","zoom","initialCenter","height","Object","keys","numSources","length","radius","center","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","GoogleApiWrapper","apiKey","App","className","Filters","Row","Col","MapView","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.34542401.chunk.js","sourcesContent":["import React from 'react';\nimport { Container, Navbar, Dropdown } from 'react-bootstrap';\nimport sources from '../data.json';\n\nconst services = new Set();\nsources.forEach(source => source.Service.split(', ').forEach(service => services.add(service)));\n\nexport default function (props) {\n  return (\n    <Container style={{ paddingTop: 20 }}>\n        <Navbar bg=\"light\">\n        <Dropdown>\n          <Dropdown.Toggle>Category Filter</Dropdown.Toggle>\n          <Dropdown.Menu>\n            {Array.from(services).sort().map(service => (\n              <Dropdown.Item key={service} onClick={() => props.filterCategory(service)}>{service}</Dropdown.Item>\n            ))}\n          </Dropdown.Menu>\n        </Dropdown>\n        </Navbar>\n    </Container>\n  );\n}\n","import React, { Component } from 'react';\nimport { isEqual } from 'lodash';\nimport { Container, ListGroup } from 'react-bootstrap';\nimport sources from '../data.json';\n\nexport default class ListView extends Component {\n  static defaultProps = {\n    offset: 0,\n    limit: 50\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { sources: this.getSources(props) }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.offset !== this.props.offset ||\n        prevProps.limit !== this.props.limit ||\n        !isEqual(prevProps.filters, this.props.filters)) {\n      this.setState({ sources: this.getSources() });\n    }\n  }\n\n  getSources(props = this.props) {\n    return sources\n      .filter(source => !!props.filters.category ? source.Service === props.filters.category : true)\n      .slice(props.offset, props.offset + props.limit)\n  }\n\n  render() {\n    return (\n      <Container style={{ paddingTop: 20 }}>\n        <ListGroup bg=\"light\">\n          {this.state.sources.map(source => (\n            <ListGroup.Item key={source.Name}>\n              <div><a href={source.Website}>{source.Name}</a></div>\n              <div>{source.Service}</div>\n              <div>{source['Phone Number']}</div>\n              <div>{source.Notes}</div>\n            </ListGroup.Item>\n          ))}\n        </ListGroup>\n      </Container>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { isEqual } from 'lodash';\nimport { Map, Circle, GoogleApiWrapper } from 'google-maps-react';\nimport sources from '../data.json';\n\nconst positions = {\n  '11377': { lat: 40.743, lng: -73.904 },\n  '11209': { lat: 40.623, lng: -74.030 },\n  '10016': { lat: 40.746, lng: -73.978 }\n}\n \nexport class MapContainer extends Component {\n  static defaultProps = {\n    offset: 0,\n    limit: 50\n  };\n\n  constructor(props) {\n    super(props);\n    this.geocoder = new props.google.maps.Geocoder();\n    this.state = { sources: this.getSources(props) }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.offset !== this.props.offset ||\n      prevProps.limit !== this.props.limit ||\n      !isEqual(prevProps.filters, this.props.filters)) {\n      this.setState({ sources: this.getSources() });\n    }\n  }\n\n  getSources(props = this.props) {\n    return sources\n      .filter(source => !!props.filters.category ? source.Service === props.filters.category : true)\n      .slice(props.offset, props.offset + props.limit)\n      .map(source => ({ ...source, position: positions[source['Zip Code']] }));\n  }\n\n  filterSourcesByZip(zip) {\n    this.setState({\n      sources: this.getSources().filter(source => source['Zip Code'] === zip)\n    })\n  }\n\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        zoom={12}\n        initialCenter={{ lat: 40.7128, lng: -74.0060 }}\n        style={{ height: 1000 }}\n      >\n        {Object.keys(positions).map(zip => {\n          const numSources = this.state.sources.filter(source => source['Zip Code'] === zip).length\n          return (\n            <Circle\n              key={zip}\n              radius={(numSources / this.state.sources.length) * 2000}\n              center={positions[zip]}\n              // onMouseover={() => console.log('mouseover')}\n              // onClick={() => this.filterSourcesByZip(zip)}\n              // onMouseout={() => console.log('mouseout')}\n              strokeColor='transparent'\n              strokeOpacity={0}\n              strokeWeight={5}\n              fillColor='#FF0000'\n              fillOpacity={0.4}\n            />\n          );\n        })}\n        {/* {this.state.sources.map(source => (\n          <Marker key={source.Name} name={source.Name} position={source.position} /> \n        ))} */}\n        {/* <InfoWindow onClose={this.onInfoWindowClose}>\n          <h1>{this.state.selectedPlace.name}</h1>\n        </InfoWindow> */}\n      </Map>\n    );\n  }\n}\n \nexport default GoogleApiWrapper({ apiKey: 'AIzaSyCsfUxfZToHaKYiLO3iWn5NZWLkwiOkhbM' })(MapContainer)","import React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport Filters from '../Filters';\nimport ListView from '../ListView';\nimport MapView from '../MapView';\nimport './index.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { filters: {} }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Filters filterCategory={(category) => this.setState({ filters: { ...this.state.filters, category } })} />\n        <Row>\n          <Col><MapView filters={this.state.filters} /></Col>\n          <Col><ListView filters={this.state.filters} /></Col>\n        </Row>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}